{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>bumplot</code>: easily create and customize bump charts in Python","text":"<p><code>bumplot</code> is a small Python package made to facilitate the creation of bump charts using matplotlib and B\u00e9zier curves. It has high customization capabilities too!</p> <p>Bump charts are useful when the focus is on comparing relative rankings\u2014who is ahead of whom\u2014rather than the exact magnitude of the differences.</p> <p> </p>"},{"location":"#quick-start","title":"Quick start","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nfrom bumplot import bumplot\n\ndata = pd.DataFrame(\n    {\n        \"x\": [2020, 2021, 2022, 2023],\n        \"A\": [10, 50, 20, 80],\n        \"B\": [40, 30, 60, 10],\n        \"C\": [90, 20, 70, 40],\n    }\n)\n\nfig, ax = plt.subplots(figsize=(8, 4))\nbumplot(\n    x=\"x\",\n    y_columns=[\"A\", \"B\", \"C\"],\n    data=data,\n    curve_force=0.5,\n    plot_kwargs={\"lw\": 4},\n    scatter_kwargs={\"s\": 150, \"ec\": \"black\", \"lw\": 2},\n    colors=[\"#ffbe0b\", \"#ff006e\", \"#3a86ff\"],\n)\nax.legend()\nax.spines[[\"top\", \"right\", \"left\", \"bottom\"]].set_visible(False)\nax.grid(alpha=0.4)\n</code></pre> <p>See more examples</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install bumplot\n</code></pre>"},{"location":"#features","title":"Features","text":"<ul> <li>Automatic ranking of your data (with support for both <code>pandas</code> and <code>polars</code>)</li> <li>Accept categorical data for x-axis</li> <li>Infinite customization capabilities</li> <li>Easy control of the curvature intensity</li> </ul>"},{"location":"advanced-usage/","title":"Advanced usage","text":"<p><code>bumplot</code> is designed to integrate seamlessly with matplotlib and allow you to control virtually everything.</p> <p>Here you will find examples that show how to use <code>bumplot</code> in more complex, but also more realistic, cases based on real data.</p> <p>These examples are also designed to be easy to reproduce: you should be able to simply copy and paste the code onto your computer.</p> <p> </p> <ul> <li>Water sources in Africa</li> </ul> <pre><code># mkdocs: render\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom pyfonts import set_default_font, load_google_font\n\nfrom bumplot import bumplot\n\nurl = \"https://raw.githubusercontent.com/y-sunflower/bumplot/main/docs/data/water-africa.csv\"\ndf = pd.read_csv(url)\n\ndef ordinal(n: int) -&gt; str:\n    if n == 1:\n        return \"1st\"\n    elif n == 2:\n        return \"2nd\"\n    elif n == 3:\n        return \"3rd\"\n    else:\n        return f\"{n}th\"\n\n\nhighlight_colors = {\n    \"Zambia\": \"#2a9d8f\",\n    \"Tanzania\": \"#bb3e03\",\n}\n\nlast_decade = df.index.max()\ncountries = df.loc[last_decade].sort_values(ascending=False).index.to_list()[1:]\ncolors = [highlight_colors.get(col, \"lightgrey\") for col in countries]\n\nfont = load_google_font(\"Poppins\")\nset_default_font(font)\n\n\nfig, ax = plt.subplots(figsize=(12, 5))\nbumplot(\n    x=\"decade\",\n    y_columns=countries,\n    data=df,\n    curve_force=0.7,\n    colors=colors,\n    scatter_kwargs={\"s\": 150, \"clip_on\": False},\n    plot_kwargs={\"lw\": 4},\n)\nax.spines[[\"top\", \"right\", \"left\", \"bottom\"]].set_visible(False)\nax.set_xlim(1969, 2020)\nax.tick_params(size=0)\nax.tick_params(axis=\"x\", labelsize=14, pad=10)\nax.set_xticks(ax.get_xticks(), labels=[round(tick) for tick in ax.get_xticks()])\nax.set_yticks(\n    [i for i in range(1, len(countries) + 1)],\n    [ordinal(i) for i in range(1, len(countries) + 1)],\n)\n\nfont_bold = load_google_font(\"Poppins\", weight=\"bold\")\nfor i, country in enumerate(countries):\n    ax.text(\n        x=2021,\n        y=i + 1,\n        s=country,\n        size=11,\n        color=colors[i],\n        va=\"center\",\n        ha=\"left\",\n        font=font_bold,\n    )\n\nfig.text(\n    x=0.5,\n    y=1.02,\n    s=\"# of water sources installations in africa\".upper(),\n    size=18,\n    ha=\"center\",\n    va=\"top\",\n    font=font_bold,\n)\nfig.text(\n    x=0.5,\n    y=0.95,\n    s=\"Ranking of each country based on the total number of water source installations for each decade\",\n    size=10,\n    ha=\"center\",\n    va=\"top\",\n    color=\"grey\",\n    font=load_google_font(\"Poppins\", italic=True),\n)\nfig.text(\n    x=0.12,\n    y=0,\n    s=\"Made with bumplot\\nGraphic: Joseph Barbier\",\n    va=\"top\",\n    color=\"grey\",\n    font=load_google_font(\"Poppins\", italic=True),\n    size=10,\n)\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Any kind of contribution is more than welcomed! There are several ways you can contribute:</p> <ul> <li>Opening GitHub issues to list the bugs you've found</li> <li>Implementation of new features or resolution of existing bugs</li> <li>Enhancing the documentation</li> </ul>"},{"location":"contributing/#setting-up-your-environment","title":"Setting up your environment","text":""},{"location":"contributing/#install-for-development","title":"Install for development","text":"<ul> <li> <p>Fork the repository to your own GitHub account.</p> </li> <li> <p>Clone your forked repository to your local machine (ensure you have Git installed):</p> </li> </ul> <pre><code>git clone https://github.com/github_user_name/bumplot.git\ncd bumplot\ngit remote add upstream https://github.com/y-sunflower/bumplot.git\n</code></pre> <ul> <li>Create a new branch:</li> </ul> <pre><code>git checkout -b my-feature\n</code></pre> <ul> <li>Set up your Python environment (ensure you have uv installed):</li> </ul> <pre><code>uv sync --all-extras --dev\nuv pip install -e .\n</code></pre>"},{"location":"contributing/#code","title":"Code","text":"<p>You can now make changes to the package and start coding!</p>"},{"location":"contributing/#run-the-test","title":"Run the test","text":"<ul> <li>Test that everything works correctly by running:</li> </ul> <pre><code>make test\n</code></pre>"},{"location":"contributing/#preview-documentation-locally","title":"Preview documentation locally","text":"<pre><code>make preview\n</code></pre>"},{"location":"contributing/#push-changes","title":"Push changes","text":"<ul> <li>Commit and push your changes:</li> </ul> <pre><code>git add -A\ngit commit -m \"description of what you did\"\ngit push\n</code></pre> <ul> <li>Navigate to your fork on GitHub and click the \"Compare &amp; pull request\" button to open a new pull request.</li> </ul> <p>Congrats! Once your PR is merged, it will be part of <code>bumplot</code>.</p> <p></p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#minimal-bump-chart-with-default-settings","title":"Minimal bump chart with default settings","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom bumplot import bumplot\n\ndf = pd.DataFrame(\n    {\n        \"year\": [2019, 2020, 2021, 2022],\n        \"Team A\": [3, 1, 2, 4],\n        \"Team B\": [2, 3, 1, 2],\n        \"Team C\": [1, 2, 3, 1],\n    }\n)\n\nfig, ax = plt.subplots(figsize=(6, 3))\nbumplot(x=\"year\", y_columns=[\"Team A\", \"Team B\", \"Team C\"], data=df)\nax.legend()\n</code></pre>"},{"location":"examples/#stronger-curves-with-custom-colors","title":"Stronger curves with custom colors","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom bumplot import bumplot\n\ndf = pd.DataFrame(\n    {\n        \"season\": [\"S1\", \"S2\", \"S3\", \"S4\"],\n        \"X\": [5, 2, 6, 3],\n        \"Y\": [2, 6, 3, 5],\n        \"Z\": [6, 3, 5, 2],\n    }\n)\n\nfig, ax = plt.subplots(figsize=(7, 4))\nbumplot(\n    x=\"season\",\n    y_columns=[\"X\", \"Y\", \"Z\"],\n    data=df,\n    curve_force=1.5,\n    colors=[\"#d62828\", \"#f77f00\", \"#003049\"],\n    scatter_kwargs={\"s\": 200, \"zorder\": 3},\n    plot_kwargs={\"lw\": 3},\n)\nax.legend()\n</code></pre>"},{"location":"examples/#multiple-bump-plots-on-subplots","title":"Multiple bump plots on subplots","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom bumplot import bumplot\n\ndf = pd.DataFrame(\n    {\n        \"round\": [1, 2, 3, 4],\n        \"P1\": [1, 2, 3, 2],\n        \"P2\": [2, 1, 2, 1],\n        \"P3\": [3, 3, 1, 3],\n    }\n)\n\nfig, axs = plt.subplots(1, 2, figsize=(12, 4))\n\nbumplot(\n   x=\"round\",\n   y_columns=[\"P1\", \"P2\"],\n   data=df,\n   ax=axs[0],\n   colors=[\"#219ebc\", \"#ffb703\"]\n)\naxs[0].legend()\n\nbumplot(\n   x=\"round\",\n   y_columns=[\"P2\", \"P3\"],\n   data=df,\n   ax=axs[1],\n   colors=[\"#ffb703\", \"#da5363ff\"]\n)\naxs[1].legend()\n</code></pre>"},{"location":"examples/#without-inverting-y-axis","title":"Without inverting y-axis","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom bumplot import bumplot\n\ndf = pd.DataFrame(\n    {\n        \"x\": [2020, 2021, 2022, 2023],\n        \"A\": [10, 20, 30, 40],\n        \"B\": [40, 30, 20, 10],\n    }\n)\n\nfig, ax = plt.subplots(figsize=(6, 3))\nbumplot(\n    x=\"x\",\n    y_columns=[\"A\", \"B\"],\n    data=df,\n    invert_y_axis=False,\n    colors=[\"#06d6a0\", \"#118ab2\"],\n)\nax.legend()\n</code></pre>"},{"location":"examples/#heavily-styled-bump-chart","title":"Heavily styled bump chart","text":"<pre><code># mkdocs: render\nimport matplotlib.pyplot as plt\nimport pandas as pd\nfrom bumplot import bumplot\n\ndf = pd.DataFrame(\n    {\n        \"Stage\": [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n        \"Alpha\": [4, 3, 2, 1],\n        \"Beta\": [1, 2, 4, 3],\n        \"Gamma\": [2, 1, 3, 4],\n    }\n)\n\nfig, ax = plt.subplots(figsize=(10, 5))\nbumplot(\n    x=\"Stage\",\n    y_columns=[\"Alpha\", \"Beta\", \"Gamma\"],\n    data=df,\n    curve_force=0.3,\n    colors=[\"#e63946\", \"#626262ff\", \"#457b9d\"],\n    plot_kwargs={\"lw\": 6, \"alpha\": 0.7},\n    scatter_kwargs={\"s\": 300, \"ec\": \"black\", \"lw\": 2},\n    ax=ax,\n)\n\nax.set_facecolor(\"#f8f9fa\")\nax.legend(frameon=False, ncol=1, bbox_to_anchor=(0, 0.5))\nax.grid(alpha=0.3, ls=\"--\")\nax.spines[[\"top\", \"right\", \"left\", \"bottom\"]].set_visible(False)\n</code></pre>"},{"location":"reference/bezier/","title":"Bezier","text":""},{"location":"reference/bezier/#bumplot.bezier.bezier_curve","title":"<code>bumplot.bezier.bezier_curve(x, y, force)</code>","text":"<p>Generate vertices and path codes for a smooth cubic B\u00e9zier curve passing through a sequence of points.</p> <p>This function is used under the hood by <code>bumplot()</code>, but you can use it too.</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>ndarray</code> <p>X-coordinates of the points.</p> required <code>y</code> <code>ndarray</code> <p>Y-coordinates of the points.</p> required <code>force</code> <code>float</code> <p>Smoothing factor controlling curve tightness. Higher values increase curvature by moving control points further away from the anchors.</p> required <p>Returns:</p> Name Type Description <code>vertices</code> <code>list[tuple[float, float]]</code> <p>List of (x, y) vertices including control points for the B\u00e9zier segments.</p> <code>codes</code> <code>list[int]</code> <p>Corresponding matplotlib Path codes for constructing the curve.</p>"},{"location":"reference/bumplot/","title":"Bumplot","text":""},{"location":"reference/bumplot/#bumplot.bumplot","title":"<code>bumplot.bumplot(x, y_columns, data, curve_force=1, invert_y_axis=True, colors=None, plot_kwargs=None, scatter_kwargs=None, ax=None, ordinal_labels=False)</code>","text":"<p>Creates bump plot, or bump chart, from multiple numerical columns.</p> <p>It requires the data to be in wide format (e.g., one column per line you want to plot).</p> <p>Parameters:</p> Name Type Description Default <code>x</code> <code>str</code> <p>colname of the x-axis variable</p> required <code>y_columns</code> <code>list[str]</code> <p>colnames of the y-axis variables</p> required <code>data</code> <code>IntoDataFrame</code> <p>A dataframe</p> required <code>curve_force</code> <code>float</code> <p>Smoothing factor controlling curve tightness. Higher values increase curvature by moving control points further away from the anchors.</p> <code>1</code> <code>invert_y_axis</code> <code>bool</code> <p>Whether to invert y axis</p> <code>True</code> <code>colors</code> <code>list | None</code> <p>An optional list of colors</p> <code>None</code> <code>plot_kwargs</code> <code>dict | None</code> <p>Additional arguments passed to <code>patches.PathPatch()</code></p> <code>None</code> <code>scatter_kwargs</code> <code>dict | None</code> <p>Additional arguments passed to <code>scatter()</code></p> <code>None</code> <code>ax</code> <code>Axes | None</code> <p>The matplotlib Axes used. Default to <code>plt.gca()</code></p> <code>None</code> <code>ordinal_labels</code> <code>bool</code> <p>If True, converts y-axis labels to ordinal numbers (1st, 2nd, 3rd, etc.)</p> <code>False</code> <p>Returns:     The matplotlib Axes with the bump plot</p>"}]}